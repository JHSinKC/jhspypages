<!DOCTYPE html lang="en">
<html lang="en-US">
<head>
<title>JHS2019 Python02 Language</title>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" href="css/JHS2018_Universal.css" type="text/css" media="screen">
</head>

<body text="#000033" vlink="#330066" alink="#ff0000" link="#0033cc" bgcolor="#b5e5d5">
<!-- +++++ new table of contents +++++++++++++++++++++++++++++--------->
<ul id="menu">

<!--  START - Language Basics section  -------------------------------->
<li><a href="OS Services">Language Basics</a>
<div class="menu-container-2">

<!--  START - Built-in Functions column  ------------------------------>
<div class="column-1"><h3>Built-in Features</h3>
<ul>
<li><a href="#doc02.functions">70 Built-in Functions</a></li>
<li><a href="">abs()</a></li>
<li><a href="">zip()</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="#doc03.constants">11 Built-in Constants</a></li>
<li><a href="">True</a></li>
<li><a href="">False</a></li>
<li><a href="">None</a></li>
<li><a href="">Ellipsis</a></li>
<li><a href="">NotImplemented</a></li>
<li><a href="">quit()</a></li>
<li><a href="">exit()</a></li>
<li><a href="">copyright</a></li>
<li><a href="">credits</a></li>
<li><a href="">license</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="#doc03.dunders">148 __Dunders__</a></li>
<li><a href="">__abs__</a></li>
<li><a href="">__xor__</a></li>
</ul></div>
<!--  END - Built-in Functions column  -------------------------------->

<!--  START - Built-in Types column1  ---------------------------------->
<div class="column-2"><h3>Built-in Types</h3>
<ul>
<li><a href="#doc04.types">4.0  Built-in Types</a></li>
<li><a href="#doc04.truth">4.1  Truth Value Testing</a></li>
<li><a href="#doc04.boolean">4.2  Boolean Operations</a></li>
<li><a href="#doc04.comparison">4.3  Comparisons</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">4.4 Numeric Types</a></li>
<li><a href="#doc04.int">Int + Float</a></li>
<li><a href="#doc04.complex">Complex numbers</a></li>
<li><a href="">4.5  Iterator Types</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">4.6 Sequence Types</a></li>
<li><a href="#doc04.list">List + Comprehensions</a></li>
<li><a href="#doc04.tuple">Tuple</a></li>
<li><a href="#doc04.range">Range</a></li>
<li><a href="">--------------------------------</a></li>
</ul></div>
<!--  END - Built-in Types column1  ----------------------------------->

<!--  START - Built-in Types column2  --------------------------------->
<div class="column-2"><h3>Built-in Types</h3>
<ul>
<li><a href="">4.8 Binary Types</a></li>
<li><a href="#doc04.byte">Byte + Bytearray</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">4.9 Set Types</a></li>
<li><a href="#doc04.set">Set + Comprehensions</a></li>
<li><a href="#doc04.frozenset">FrozenSet</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">4.10 Mapping Types</a></li>
<li><a href="#doc04.dictionary">Dictionary + Comprehensions</a></li>
<li><a href="#doc04.collections">Collections</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">4.11  Context Manager Types</a></li>
<li><a href="">4.12  Other Built-in Types</a></li>
<li><a href="">4.13  Special Attributes</a></li>
<li><a href="#doc04.generator">Generator functions</a></li>
</ul></div>
<!--  END - Built-in Types column2  ----------------------------------->

</div></li>
<!--  END - Language Basics section  ---------------------------------->


<!--  START - Protocols and Support  section  ------------------------->
<li><a href="#">Internet Protocols</a>
<div class="menu-container-1">

<!--  START - Program Frameworks column  ------------------------------>
<div class="column-1"><h3>Program Frameworks</h3>
<ul>
<li><a href="#doc25">25.0 Program Framewrks</a></li>
<li><a href="#cmd">'cmd' comm line</a></li>
<li><a href="#shlex">'shlex' lexical analysis</a></li>
<li><a href="">--------------------------------</a></li>
<li><a href="">Iterator Types</a></li>
<li><a href="">Context Manager Types</a></li>
<li><a href="">Other Built-in Types</a></li>
<li><a href="">Special Attributes</a></li>
</ul></div>
<!--  END - Program Frameworks column  -------------------------------->

</div></li>
<!--  END - Protocols and Support section  ---------------------------->


<!--  START - Python Data Types section  ------------------------------>
<li><a href="" id="Networking">Python Data Types</a>
<div class="menu-container-1">

<!--  START - Python Data Types column  ------------------------------->
<div class="column-1"><h3>Python Data Types</h3>
<ul>
<li><a href="#doc08.heapq">8.5 'heapq'</a></li>
<li><a href="#doc07.bisect">8.6 'bisect'</a></li>
<li><a href="#doc07.array">8.7 'array'</a></li>
<li><a href="#doc07.weakref">8.8 'weakref'</a></li>
<li><a href="#doc07.types">8.9 'types'</a></li>
<li><a href="#doc08.copy">8.10 'copy'</a></li>
<li><a href="#doc07.pprint">8.11 'pprint'</a></li>
<li><a href="#doc07.reprlib">8.12 'reprlib'</a></li>
<li><a href="#doc08.enum">8.13 'enum'</a></li>
</ul></div>
<!--  START - Python Data Types column  ------------------------------->

</div></li>
<!--  END - Python Data Types section  -------------------------------->


<!--  START - Python Language Services section  ----------------------->
<li><a href="#">Python Language Services</a>
<div class="menu-container-1">
<!--  START - Internationalization column  ---------------------------->
<div class="column-1"><h3>Python Language Services</h3>
<ul>
<li><a href="#doc33">33.0 Python Language Services</a></li>
<li><a href="#doc33.parser">33.1 'parser' access</a></li>
<li><a href="#doc16.argparse">16.4 'argparse'</a></li>
<li><a href="#doc33.ast">33.2 'ast'</a></li>
<li><a href="#doc33.symtable">33.3 'symtable'</a></li>
<li><a href="#doc33.symbol">33.4 'symbol'</a></li>
<li><a href="#doc33.token">33.5 'token'</a></li>
<li><a href="#doc33.keyword">33.6 'keyword'</a></li>
<li><a href="#doc33.tokenize">33.7 'tokenize'</a></li>
<li><a href="#doc33.tabnanny">33.8 'tabnanny'</a></li>
<li><a href="#doc33.pyclbr">33.9 'pyclbr'</a></li>
<li><a href="#doc33.py_compile">33.10 'py_compile'</a></li>
<li><a href="#doc33.compileall">33.11 'compileall'</a></li>
<li><a href="#doc33.dis">33.12 'dis'</a></li>
<li><a href="#doc02.loops">Loops:'for' 'while'</a></li>
<li><a href="#doc10.itertools">10.1 'itertools'</a></li>
<li><a href="#doc10.functools">10.2 'functools'</a></li>
<li><a href="#doc10.operator">10.3 'operator''</a></li>
</ul></div>
<!--  START - Python Language Services column  ------------------------>
</div></li>
<!--  END - Python Language Services section  ------------------------->

</ul>
<!-- +++++ end table of contents +++++++++++++++++++++++++++----------->
<br><p></p>

<!-- +++++++++++++++++++++++++++++++++++++++++++++--------------------->
<!-- +++++++++++++++++++++++++++++++++++++++++++- --------------------->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc02">2.0 Python Built-In Functions</a></p></td>
</tr>
</tbody>
</table>

<p>Python v3.7 has (69) built-in functions.</p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://devdocs.io/python~3.7/library/functions" target="_blank">3.7docs</a>
| <a href="https://docs.python.org/3.7/library/functions.html?highlight=chr#chr" target="_blank">3.7docs</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="faqheader">Functions: Using positional parameters along with named keyword parameters</div>
<div class="faqdescription">
<kbd>def example2(arg_1, arg_2, *args, kw_1="shark", kw_2="blobfish", **kwargs):</kbd></div>
<p></p>
<div class="faqheader">What is '*args'</div>
<div class="faqdescription">Used to pass an indefinite number of 'unnamed, non-keyworded' values into a function.<br>
<kbd>def myfunction(*args):</kbd> allows you to pass in more values than if the function defined a set number of input parameters (including zero extra arguments).</div>
<div class="faqheader">What is '**kwargs'</div>
<div class="faqdescription">Used to pass in an indefinite number of named, keyword arguments into a function.<br>
<kbd>def myfunction(**kwargs):</kbd> allows an indeterminate number of keywords (variable name=value) pairs into a function.<br>
Think of 'kwargs' as being an input parameter dictionary that maps keyword=value (name="Tad") pairs and we can work with it just like any other dictionary.</div>
<p></p>
<div class="faqheader">Errors using *args in a function.</div>
<div class="faqdescription">TypeError: If the function has 3 formal input parameters and you send *args with 4 inputs.<br>
TypeError: If the function has 3 formal input parameters and you send *args with 2 inputs.</div>
<p></p>


<div class="propertyheader">eval(expression, globals=None, locals=None)</div>
<div class="propertydescription">Evaluates the expression and assigns the variable the same type as the input expression. If the input is an integer, the output variable is an integer; same for strings and floats. <br>
[python console] <kbd>eval('x+1') </kbd> returns '2'.<br>
[python console] <kbd>my_str = eval('Monday') </kbd> Eval sets my_str as a string variable based on the expression string ('Monday').
</div>

<div class="propertyheader">print(string, seperator(:), end=" ")</div>
<div class="propertydescription">The input is a string.  The output is written to a string stream file.<br>
[python console] <kbd>print('Today is Monday.') </kbd> returns 'Today is Monday'.</div>

<div class="propertyheader">input(string, my_var)</div>
<div class="propertydescription">The output is a string instruction to the user.  The user's input is stored in my_var.<br>
[python console] <kbd>day_of_week = input('What day of the week is today?') </kbd> outputs 'What day of the week is today?'.  The user is asked to supply the name of the day, stored in day_of_week.</div>

<div class="propertyheader">type(exp)</div>
<div class="propertydescription">The input is an expression (exp).  The output is the Python class type of the expression.<br>
[python console] <kbd>type('x') </kbd> returns 'class str'.</div>
<!-- +++++++++++++++++++++++++++++++++++++++++++++--------------------->
<!-- +++++++++++++++++++++++++++++++++++++++++++- --------------------->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc02.loops">Python Looping Techniques: 'for' 'while' 'enumerate()'</a></p></td>
</tr>
</tbody>
</table>

<div class="faqheader">'for' loop</div>
<div class="faqdescription"><kbd>for (startnum; endnum or terminate logic; step)</kbd><br>
<kbd>for each_item in (my_list; my_tuple; my_string; my_dict)</kbd><br>
<kbd>for each_num in range(startnum, endnum, step)</kbd><br>
<kbd>for each_num = startnum to endnum</kbd>
</div>
<p></p>
<div class="faqheader">'while' loop</div>
<div class="faqdescription"><kbd>count = 0</kbd><br>
<kbd>while count < 5:</kbd><br>
<kbd>. . print(count)</kbd><br>
<kbd>. . count += 1</kbd> # This is the same as count = count + 1</div>
<p></p>
<div class="faqheader">'enumerate(my_list/_tuple/_string/_dict, start_value)' function</div>
<div class="faqdescription"><kbd>for counter, value in enumerate(some_list):</kbd> 'counter' does len(some_list)<br>
<kbd>. . print(counter, value)</kbd> displays some_list[index] and the value<br>
</div>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/tutorial/datastructures.html?highlight=loop" target="_blank">docs3.7</a>
| <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-loopidioms" target="_blank">5.6. Looping Techniques</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://www.py4e.com/html3/05-iterations" target="_blank">Py4E</a>
| <a href="https://www.pythonforbeginners.com/loops/" target="_blank">Python4Begginers</a>
| <a href="https://www.learnpython.org/en/Loops" target="_blank">LearnPython</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="https://www.youtube.com/watch?v=HFQGxh1jY3g" target="_blank">Al Sweigart</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<p></p>
<div class="propertyheader"></div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc10.itertools">'itertools' — Functions creating iterators for efficient looping</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a>
</p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.<br>
For instance, SML provides a tabulation tool: tabulate(f) which produces a sequence f(0), f(1), .... The same effect can be achieved in Python by combining map() and count() to form map(f, count()).<br>
These tools and their built-in counterparts also work well with the high-speed functions in the operator module. For example, the multiplication operator can be mapped across two vectors to form an efficient dot-product: sum(map(operator.mul, vector1, vector2)).</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/itertools.html" target="_blank">docs3.7.1</a>
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="https://www.youtube.com/watch?v=SxTIWPeFnIY" target="_blank">Python Basics: Itertools Permutations</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://realpython.com/python-itertools/" target="_blank">realpython: Itertools in Python3, By Example</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="https://www.blog.pythonlibrary.org/2016/04/20/python-201-an-intro-to-itertools/" target="_blank">pythonlibrary: Python 201: An Intro to itertools</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">3</div>
<div class="propertydescription"></div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc10.functools">10.2 'functools' — Higher-order functions and operations on callable objects</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription"></div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc10.operator">10.3 'operator'— Standard operators as functions</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python.<br>
For example, <kbd>operator.add(x, y)</kbd> is equivalent to the expression x+y. Many function names are those used for special methods, without the double underscores. For backward compatibility, many of these have a variant with the double underscores kept. The variants without the double underscores are preferred for clarity.<br>
The functions fall into categories that perform object comparisons, logical operations, mathematical operations and sequence operations.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">

| <a href="https://docs.python.org/3.7/library/operator.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">When to use the built-in 'operator' module.</div>
<div class="propertydescription">The module is useful when you need to pass a function as an argument to something. There are then two options: use the operator module, or define a new function (using def or lambda). If you define a function on the fly, this can create a problem if you need to pickle this function, either to save it to disk or to pass it between processes.</div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++------------------------------------>
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc03.dunders">__Dunder__ List</a><br>
<a class="semanticweb">Version:  Released: 2019</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>
<p></p>

<div class="faqdescription">Python "special" methods exist on certain objects, and calls to perform some basic functionality of the language, such as when using operators like + (calls __add__) or built-in functions like len (calls __len__).  These methods are generally called by the Python interpreter; they are not exposed to users. But we can call them if we want to, if we know what we're doing.<br>
All 'double underscore' items should be pronounced "dunder". So '__init__' is "dunder init dunder", or just "dunder init".  Referred to as “Dunders” or “special methods” or “magic methods.”</div>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>
<p></p>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- +++++++++++++++++++++++++++++++++++++++++------------------------->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  ---------------->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.types">4.0  Built-In Types</a></p></td>
</tr>
</tbody>
</table>

<table>
<tr>
<td><mark class="semanticweb">Immutable</mark></td>
<td>. . .</td>
<td><mark class="semanticweb">Mutable</mark></td>
</tr>
<tr>
<td>int + float + complex</td>
<td></td>
<td>list</td>
</tr>
<tr>
<td>string + tuple + range</td>
<td></td>
<td>dict</td>
</tr>
<tr>
<td>decimal + frozenset</td>
<td></td>
<td>set</td>
</tr>
<tr>
<td>byte + bool</td>
<td></td>
<td>array + bytearray</td>
</tr>
</table>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/stdtypes.html#other-built-in-types" target="_blank">3.7docs</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
[ Python Central ] <a href="https://www.pythoncentral.io/series/python-data-structures-tutorial/" target="_blank">Python Data Structures Tutorial</a>
| <a href="https://www.pythoncentral.io/search-implementations-linear-binary/" target="_blank">05 Search implementations: Linear and Binary</a>
|</div>
<p></p>

<!-- Python Central: Queue Tutorials ---------------------------------->
<div class="faqheader">Queue</div>
<div class="faqdescription">
[ Python Central ] <a href="https://www.pythoncentral.io/series/python-data-structures-tutorial/" target="_blank">Python Data Structures Tutorial</a>
| <a href="https://www.pythoncentral.io/use-queue-beginners-guide/" target="_blank">03 How to use Queue</a>
| <a href="https://www.pythoncentral.io/circular-queue/" target="_blank">04 Circular Queue</a>
|<br><span>--&gt;</span>
| <a href="https://www.pythoncentral.io/priority-queue-beginners-guide/" target="_blank">06 Priority Queue</a>
|</div>
<p></p>
<div class="propertyheader">Use a list as a 'queue' (FIFO)</div> Not recommended.  See <a href="#deque">collections.deque</a>.
<div class="propertydescription">Use <kbd>my_list.insert(0, 'value')</kbd> to push a new value onto the zero-end, the near end of my_list[].<br>
Use <kbd>val = my_list.pop(0)</kbd> to pop values off the zero-end, near end of my_list[].</div>
<p></p>
<!-- Python Central: Queue Tutorials ---------------------------------->

<!-- Python Central: Sort Tutorials ----------------------------------->
<div class="faqheader">Sorting</div>
<div class="faqdescription">
[ Python Central ] <a href="https://www.pythoncentral.io/series/python-data-structures-tutorial/" target="_blank">Python Data Structures Tutorial</a>
| <a href="https://www.pythoncentral.io/bubble-sort-implementation-guide/" target="_blank">01 Bubble Sort</a>
| <a href="https://www.pythoncentral.io/insertion-sort-implementation-guide/" target="_blank">07 Insertion Sort</a>
| <a href="https://www.pythoncentral.io/selection-sort-implementation-guide/" target="_blank">08 Selection Sort</a>
|<br><span>--&gt;</span>
| <a href="https://www.pythoncentral.io/merge-sort-implementation-guide/" target="_blank">09 Merge Sort</a>
| <a href="https://www.pythoncentral.io/quick-sort-implementation-guide/" target="_blank">10 Quick Sort</a>
|</div>
<!-- Python Central: Sort Tutorials ----------------------------------->
<p></p>

<!-- Python Central: Stack Tutorials ---------------------------------->
<div class="faqheader">Stack</div>
<div class="faqdescription">
[ Python Central ] <a href="https://www.pythoncentral.io/series/python-data-structures-tutorial/" target="_blank">Python Data Structures Tutorial</a>
| <a href="https://www.pythoncentral.io/stack-tutorial-python-implementation/" target="_blank">02 Stack Tutorial: An implementation beginner’s guide</a>
|</div>
<p></p>
<div class="propertyheader">Use a list as a 'stack' (LIFO)</div> Not recommended.  See <a href="#deque">collections.deque</a>.
<div class="propertydescription">Use <kbd>my_list.append(new)</kbd> to push values onto the far-end/top of the stack.<br>
Use <kbd>my_list.pop()</kbd> to pop values off the far-end/top of the stack.</div>
<!-- Python Central: Stack Tutorials ---------------------------------->
</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="https://www.geeksforgeeks.org/packing-and-unpacking-arguments-in-python/" target="_blank">geeksforgeeks: Packing and Unpacking Arguments</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="faqheader">chr(int)</div>
<div class="faqdescription">The integer input is a number between 0 - 1,114,111. The output is the represented Unicode character.<br>
[python console] <kbd>chr(120) </kbd> returns 'x'.</div>
<p></p>
<div class="faqheader">ord(c)</div>
<div class="faqdescription">The input is a single character (c).  The output is Unicode number representing that character.<br>
[python console] <kbd>ord('x') </kbd> returns '120'.</div>
<p></p>
<div class="propertyheader"></div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.numeric">[Numeric types] 'int' + 'float' + 'complex'</a></p></td>
</tr>
</tbody>
</table>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="faqheader" id="doc04.06.4">'int' <mark class="semanticweb">Mutable</mark></div>
<div class="faqdescription"></div>
<p></p>

<div class="faqheader" id="doc04.06.5">'float' <mark class="semanticweb">Mutable</mark></div>
<div class="faqdescription"></div>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://realpython.com/python-lists-tuples/" target="_blank">RealPython</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="faqheader" id="doc04.06.6">'complex' <mark class="semanticweb">Mutable</mark></div>
<div class="faqdescription"></div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.list">List + List comprehensions [Sequence types]</a> <mark class="semanticweb">Mutable, Ordered</mark></p></td>
</tr>
</tbody>
</table>

<div class="elementdescription">Lists never have gaps!</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/tutorial/datastructures.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://python101.pythonlibrary.org/chapter6_comprehensions.html" target="_blank">Python101</a>
| <a href="http://www.diveintopython3.net/comprehensions.html" target="_blank">diveintopython</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|<br>

<!-- Python Central: List Tutorials ----------------------------------->
[ Python Central ] <a href="https://www.pythoncentral.io/series/python-data-structures-tutorial/" target="_blank">Python Data Structures Tutorial</a>
| <a href="https://www.pythoncentral.io/python-lists-and-tuples/" target="_blank">Python Lists and Tuples</a>*
|<br><span>--&gt;</span>
| <a href="https://www.pythoncentral.io/python-reverse-list-place/" target="_blank">11 Python List: How To Implement in Place Reversal</a>
| <a href="https://www.pythoncentral.io/singly-linked-list-insert-node/" target="_blank">12 Singly Linked List: How To Insert + Print Node</a>
|<br><span>--&gt;</span>
| <a href="https://www.pythoncentral.io/find-remove-node-linked-lists/" target="_blank">13 Singly Linked List: How To Find + Remove a Node</a>
| <a href="https://www.pythoncentral.io/reverse-singly-linked-list/" target="_blank">14 How To Reverse a Singly Linked List</a>
|</div>
<!-- Python Central: List Tutorials ----------------------------------->
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>
<p></p>

<div class="propertyheader">What is "extended slice syntax"</div>
<div class="propertydescription"><kbd>p = backwards<br>
print p[::-1]</kbd>
you tell the function where to begin and end (by inserting two semicolons you're telling the function to begin at the beginning and end at the end), using "-1" to iterate through the string backwards<br>
(Using "-2" would still print backwards, but would step over every other letter, resulting in "srwcb"</div>
<p></p>

<div class="faqdescription"><kbd>my_list.count("apple")</kbd> counts the number of 'apple" occuring in my_list</div>
<div class="faqdescription"><kbd>my_list.index("apple")</kbd> returns the index of the first occurence of 'apple" in my_list</div>
<div class="faqdescription"><kbd>'apple' in my_list</kbd> returns True or False if string occurs in my_list</div>

<div class="faqdescription"><kbd>my_list = my_list + ['monday', 2.0]</kbd> join lists using concatenation</div>
<div class="faqdescription"><kbd>my_list.append('tuesday')</kbd> takes a single argument, which can be any datatype. Here, you’re calling the append() method with a list of three items. If you start with a list of six items and append a list onto it, you end up with... a list+1 (7 items).</div>
<div class="faqdescription"><kbd>my_list.extend(['four', 'G'])</kbd> takes a single argument, which is always a list, and adds each of the items of that list to my_list. If you start with a list of six items and append a list of six items onto it, you end up with a list of the sum of both lists (12 items).</div>
<div class="faqdescription">
<kbd>my_list.insert(0, 'G')</kbd> inserts new value ('G') at the index [0] indicated</div>
<div class="faqdescription"><kbd>del my_list[1]</kbd> removes the item at the specified index. All items after the deleted item shift their positional index to “fill the gap” created by deleting the item.</div>
<div class="faqdescription"><kbd>my_list.remove('apple')</kbd> removes the first occurence of 'apple' from the list.</div>
<div class="faqdescription"><kbd>my_list.pop(index)</kbd> pop.() removes the last item; pop(index) removes that item, shifts all items after it to “fill the gap,” and returns the value it removed.</div>
<p></p>
<div class="faqdescription"><kbd>tuple(my_list)</kbd> converts items from my_list into a tuple</div>
<div class="faqdescription"><kbd>list(my_tuple)</kbd> converts items from my_tuple into a list</div>
<p></p>

<hr />
<p></p>
<p></p>
<div class="faqheader"><a id="list.comp">List Comprehensions</a></div>
<p></p>
<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/tutorial/datastructures.html" target="_blank">doc3.7.1</a>
| <a href="https://www.python.org/dev/peps/pep-0202/" target="_blank">PEP 202 (2000)</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="https://www.youtube.com/watch?v=AhSvKGTh28Q&list=PLi01XoE8jYohWFPpC17Z-wWhPOSuh8Er-&index=23&t=0s" target="_blank">Socratica</a>

| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3" target="_blank">digitalocean: List Comprehensions</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="http://www.dalkescientific.com/writings/NBN/list_comps.html" target="_blank">dalkescientific: List Comprehensions</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">How does a List Comprehension work?</div>
<div class="propertydescription"><kbd>*destination_list* = [*transform*  *iteration*  *filter*]</kbd><br>
<kbd>destination_list = [expression(i) for i in source_list if filter(i)]</kbd><br>
<li>The *iteration* loops through the source_list[].</li>
<li>If the *filter expression* == True, the *transform expression* is executed, the result is added to the destination_list[].</li>
<li>If the *filter expression* == False, the *transform expression* does not execute and the iteration continues.</li>
<li>If there is only a var_name and no *transform expression*, the var_name holds the result is simply added to the destination_list[] and the iteration continues.</li>
</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.tuple">Tuple [Sequence types]</a> <mark class="semanticweb">Immutable, Ordered</mark></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">
<li>Tuples are immutable, they “write-protect” your data. Tuples are faster than lists.</li>
<li>Tuples are comparable.</li>
<li>You can not insert / append / delete value inside a tuple. <kbd>del my_tuple</kbd> deletes the entire thing.</li>
<li>Tuples immutable elements can be used as key for dictionary, which is not possible with lists.</li>
<li>Tuples are hashable, and mutable lists are not.</li>
</div>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="http://www.diveintopython3.net/native-datatypes.html#tuples" target="_blank">diveintopython3</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
    | <a href="https://realpython.com/python-lists-tuples/" target="_blank">RealPython</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://www.programiz.com/python-programming/tuple" target="_blank">programiz: tuple</a>
 - <span class="update">(visited 07 Dec 19)</span>
</li>
<li>
<a class="listitem" href="https://www.guru99.com/python-tuples-tutorial-comparing-deleting-slicing-keys-unpacking.html" target="_blank">Guru99: Tuples</a>
 - <span class="update">(visited 07 Dec 19)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>
<p></p>

<div class="propertyheader">Packing / Unpacking tuples</div>
<div class="propertydescription"><kbd>my_tuple = ("monday", "tuesday", "wednesday")</kbd> packs the tuple<br>
<kbd>(first_DOW, second_DOW, third_DOW) = x</kbd> unpacks the tuple into symbol table</div>
<p></p>

<div class="propertyheader">Confirm existing value in tuple</div>
<div class="propertydescription"><kbd>'apple' in my_tuple</kbd> returns True or False if string occurs in my_tuple</div>
<div class="propertydescription"><kbd>my_tuple.index("apple")</kbd> returns the index of the first occurence of 'apple" in my_tuple</div>
<p></p>

<div class="faqheader">Built-in Functions</div>
<div class="faqdescription">
<li><kbd>all()</kbd> Return True if all elements of the tuple are true (or if the tuple is empty).</li>
<li><kbd>any()</kbd> Return True if any element of the tuple is true. If the tuple is empty, return False.</li>
<li><kbd>cmp()</kbd></li>
<li><kbd>enumerate()</kbd> Return an enumerate object. It contains the index and value of all the items of tuple as pairs.</li>
<li><kbd>my_tuple.index('apple')</kbd> returns the index for the first occurence</li>
<li><kbd>my_tuple.count('apple')</kbd> returns the number of occurences</li>
<li><kbd>max()</kbd> Return the largest item in the tuple.</li>
<li><kbd>min()</kbd> Return the smallest item in the tuple</li>
<li><kbd>len(my_tuple)</kbd> Return the length (the number of items) in the tuple.</li>
<li><kbd>sorted()</kbd> Take elements in the tuple and return a new sorted list (does not sort the tuple itself).</li>
<li><kbd>sum()</kbd> Retrun the sum of all elements in the tuple.</li>
<li><kbd>tuple(my_list)</kbd> converts items from my_list into an immutable tuple</li>
<li><kbd>str(my_tuple)</kbd> converts items from my_tuple into a mutable list</li>
</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.range">Range [Sequence types]</a></p></td>
</tr>
</tbody>
</table>
<p></p>

<p>The built-in range() function constructs a sequence of integers. (Technically, the range() function returns
an iterator, not a list or a tuple</p>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"><kbd>(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)</kbd><br>
<kbd>MONDAY</kbd> returns index == 0<br>
<kbd>TUESDAY</kbd> returns index == 1<br>
<kbd>SUNDAY</kbd> returns index == 6<br>
</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.dictionary">[Sequence types] 'dictionary' 'dictionary comprehension'</a> <mark class="semanticweb">Mutable, Unordered</mark></p></td>
</tr>
</tbody>
</table>

<div class="elementdescription">Dictionaries are a way of storing data elements. You access a Python list using an unseen, sequential index, which cannot be used with a dictionary.  A Python dictionary assigns a fixed key index to each data value.  You must know the key to get the value.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://www.datacamp.com/community/tutorials/python-dictionary-tutorial" target="_blank">DataCamp</a>
| <a href="http://www.diveintopython3.net/native-datatypes.html#dictionaries" target="_blank">diveintopython3</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="faqheader">Dictionary view objects</div>
<div class="faqdescription">
<li>dict.keys()</li>
<li>dict.values()</li>
<li>dict.items()</li>
</div>
<p></p>
<div class="faqheader">#1 Determine if my_dict has a specfic key?</div>
<div class="faqdescription"><kbd>if 'location' in my_dict:<br>print(my_dict['location'])<br>
else:<br>print('my_dict does not have a location key')</kbd></div>
<div class="faqheader">#2 Determine if my_dict has a specfic key?</div>
<div class="faqdescription"><kbd>try:<br>print(my_dict['location'])<br>
except KeyError:<br>print('my_dict does not have a location key')</kbd></div>
<p></p>
<div class="propertyheader">What data types are 'hashable'?</div>
<div class="propertydescription">Note: The keys in a dictionary have to be hashable.  The items in a dictionary can have any data type.
<li>Hashable: Integers + floating point numbers + strings + tuples + frozensets.</li>
<li>Not Hashable: Lists + dictionaries + sets.</li> </div>
<p></p>
<div class="propertyheader">What data types are relatred to 'dict'?</div>
<div class="propertydescription"><kbd>dir(my_dict)</kbd> </div>
<p></p>
<div class="propertyheader">View HELP for get funciton?</div>
<div class="propertydescription"><kbd>help(my_dict.get)</kbd> </div>
<p></p>
<div class="propertyheader">Use my_dict.keys() function</div>
<div class="propertydescription"><kbd>for key in my_dict.keys()<br>value = my_dict[key]<br>print(key, value, sep=" = ")</kbd> </div>
<div class="propertyheader">Use my_dict.items() function</div>
<div class="propertydescription"><kbd>for key, value in my_dict.items()<br>print(key, value, sep=" = ")</kbd> </div>
<p></p>

<hr />
<p></p>
<p></p>
<div class="faqheader"><a id="dict.comp">Dictionary Comprehensions</a></div>
<p>A Python 'dictionary' is an 'associative array' or 'map'.</p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://www.python.org/dev/peps/pep-0274/" target="_blank">PEP 274 (2001)</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="https://www.youtube.com/watch?v=XCcpzWs-CI4" target="_blank">Socratica</a>
| <a href="https://www.youtube.com/watch?v=J_R2nxy1nQY" target="_blank">Pretty Printed</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorial</div>
<div class="elementdescription">
| <a href="https://www.datacamp.com/community/tutorials/python-dictionary-comprehension" target="_blank">DataCamp</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">How does a Dictionary Comprehension work?</div>
<div class="propertydescription"><kbd>*destination_dict* = {*transform*  *iteration*  *filter*}</kbd><br>
<kbd>destination_dict = {k:v for (k,v) in d.items() if filter_string in k}</kbd><br>
<li>The *iteration* loops through the source_dict{}.</li>
<li>If the *filter expression* == True, the *transform expression* is executed, the result is added to the destination_dict{}.</li>
<li>If the *filter expression* == False, the *transform expression* does not execute and the iteration continues.</li>
<li>If there is only a var_name and no *transform expression*, the var_name holds the result is simply added to the destination_dict{} and the iteration continues.</li>
</div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc08.collections">8.3 'collections' — Container datatypes</a></p></td>
</tr>
</tbody>
</table>
<div class="faqdescription">This module implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.</div>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/collections.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="faqheader"><a id="deque">collections.deque([interable[, maxlen]])</a></div>
<p></p>
<div class="propertyheader">collections.deque([interable[, maxlen]])</div>
<div class="propertydescription">Deques (“deck”) are a generalization of stacks and queues.</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.byte">[Binary Sequence Types] 'bytes', 'bytearray', 'memoryview'</a> <mark class="semanticweb">Immutable</mark></p></td>
</tr>
</tbody>
</table>

<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.set">[Mapping type] 'set', 'set comprhensions' 'frozenset'</a> <mark class="semanticweb">Immutable, Unordered</mark></p></td>
</tr>
</tbody>
</table>
<p></p>


<p>since sets are unordered, there is no “last” value in a set, so there is no way to control which value gets removed. It is
completely arbitrary.</p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://www.python-course.eu/python_sets_example.php" target="_blank">CourseEU</a>
| <a href="http://www.diveintopython3.net/native-datatypes.html#sets" target="_blank">diveintopython3</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>
<p></p>

<div class="faqheader">Convert 'list' into 'set'</div>
<div class="faqdescription"><kbd>my_set set(my_list)</kbd> creates my_set with the items from my_list</div>
<div class="faqdescription"><kbd>list(my_tuple)</kbd> converts items from my_tuple into a list</div>
<p></p>
<div class="faqheader">Adding items to a set; Duplicate values are ignored, sets can not contain duplicates.</div>
<div class="faqdescription"><kbd>my_set.add(42)</kbd> 'pushes' the integer '42' into my_set{}.<br>
<kbd>my_set.update('42')</kbd> 'pushes' the string "42" into my_set{}.<br>
<kbd>my_set.update({6})</kbd> 'pushes' the integer '6' into my_set{}.<br>
</div>

<div class="faqheader">Removing items from a set.</div>
<div class="faqdescription">
<ol>
<li><kbd>my_set.remove(42)</kbd> removes value, if present. KeyError: 21 raised if the value is not present.</li>
<li><kbd>my_set.discard(42)</kbd> removes value if present. No error is raised if the value is not present.</li>
<li><kbd>my_set.pop()</kbd> since sets are unordered, there is no “last” value in a set, so there is no way to control which value gets removed. It is
completely arbitrary.</li>
<li><kbd>my_set.clear()</kbd> removes all values from my_set.</li>
</ol></div>
<div class="faqdescription"><kbd>len(my_set)</kbd> returns the number of items</div>
<p></p>
<hr />
<p></p>
<p></p>
<div class="faqheader"><a id="set.comp">Set Comprehensions</a></div>
<p></p>
<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<div class="elementheader">Tutorial
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">How does a Set Comprehension work?</div>
<div class="propertydescription"><kbd>*destination_list* = [*transform*  *iteration*  *filter*]</kbd><br>
<kbd>destination_list = [expression(i) for i in source_list if filter(i)]</kbd><br>
<li>The *iteration* loops through the source_list[].</li>
<li>If the *filter expression* == True, the *transform expression* is executed, the result is added to the destination_list[].</li>
<li>If the *filter expression* == False, the *transform expression* does not execute and the iteration continues.</li>
<li>If there is only a var_name and no *transform expression*, the var_name holds the result is simply added to the destination_list[] and the iteration continues.</li>
</div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc04.generator">Generator Functions</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">Generators are perfect for reading a large number of large files since they yield out data a single chunk at a time irrespective of the size of the input stream. They can also result in cleaner code by decoupling the iteration process into smaller components.</div>
<p></p>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://www.python.org/dev/peps/pep-0255/" target="_blank">PEP 255</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="https://thepythonguru.com/python-generators/" target="_blank">PythonGuru: Generators</a>
| <a href="https://www.dataquest.io/blog/python-generators-tutorial/" target="_blank">Dataquest: Generators</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
- <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
- <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="http://www.diveintopython3.net/generators.html" target="_blank">diveintopython3</a>
- <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="http://www.dabeaz.com/generators/" target="_blank">Generator Tricks for Systems Programmers</a>
 - <span class="update">(published Mar 13 08)</span>
</li>
<li>
<a class="listitem" href="https://realpython.com/introduction-to-python-generators/" target="_blank">Introduction to Python Generators</a>
 - <span class="update">(visited 08 Oct 18)</span>
</li>
<li>
<a class="listitem" href="https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888" target="_blank">How — and why — you should use Python Generators</a>
 - <span class="update">(visited 08 Oct 18)</span>
</li>
<li>
<a class="listitem" href="https://www.programiz.com/python-programming/generator" target="_blank">Programiz: Python Generators</a>
 - <span class="update">(visited 08 Oct 18)</span>
</li>
<li>
<a class="listitem" href="https://wiki.python.org/moin/Generators" target="_blank">PythonWiki: Generators</a>
 - <span class="update">(visited 08 Oct 18)</span>
</li>
</ol>

<div class="propertyheader">How does a generator function work?</div>
<div class="propertydescription"><kbd>def countdown(num):</kbd><br>
<kbd>...     print('Starting')</kbd><br>
<kbd>...     while num > 0:</kbd><br>
<kbd>...         yield num</kbd><br>
<kbd>...         num -= 1</kbd>
<p></p>
<kbd>$$ val = countdown(5)</kbd>  calling the countdown function does not execute it.<br>
<kbd>$$ val</kbd> remember countdown is a generator function and val is a generator object<br>
<p></p>
<p></p>
<kbd>$$ next(val)</kbd>  Generator objects execute when next(val object) is called.<br>
<kbd><i>Starting</i></kbd><br>
<kbd>5</kbd><
</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc33">33.0 'Python Language' Services</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="elementdescription"></div>

<div class="elementheader">Reference</div>
<div class="elementdescription">

| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://tkdocs.com/tutorial/index.html" target="_blank">Tkdocs</a>
 - <span class="update">(visited 24 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">33.10 How to compile a Python source file</div>
<div class="propertydescription">[python console] <kbd> import py_compile</kbd><br>
[python console] <kbd>py_compile.compile('filename.py')</kbd></div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.getopt">16.5 'getopt' Parser Module</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription"></div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">T</a>
 - <span class="update">(visited 24 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">How</div>
<div class="propertydescription">[Fr</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.argparse">16.4 'argparse' Parser Module</a><br>
<a class="semanticweb">Version: 3.7.1  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The argparse module is used to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. 'argv', 'args'</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm" target="_blank">TutorialsPoint</a>
| <a href="https://www.pythonforbeginners.com/argparse/argparse-tutorial" target="_blank">Python4Beginners</a>
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://pymotw.com/2/argparse/" target="_blank">PyMOTW</a>
 - <span class="update">(visited 27 Aug 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">What is 'args'?</div>
<div class="propertydescription">List of strings to parse. The default is taken from <kbd>sys.argv</kbd>.</div>
<p></p>
<div class="propertyheader">What is 'argv'?</div>
<div class="propertydescription">'arguments vector' is the list of command-line arguments.</div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.getpass">16.9 'getpass' — Portable password input</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The getpass module provides two functions: .getpass() and .getuser().</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/getpass.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>

</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.curses">16.10 'curses' — Terminal handling for character-cell displays</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The curses module provides an interface to the curses library, the de-facto standard for portable advanced terminal handling.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/curses.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>

</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.curses.textpad">16.11 'curses.textpad' — Text input widget for curses programs</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">This module provides various time-related functions. For related functionality, see also the datetime and calendar modules.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/curses.html#module-curses.textpad" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">T</a>
 - <span class="update">(visited 24 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">How</div>
<div class="propertydescription">[Fr</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.curses.ascii">16.12 'curses.ascii' — Utilities for ASCII characters</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The curses.ascii module supplies name constants for ASCII characters and functions to test membership in various ASCII character classes.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/curses.ascii.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>

</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.curses.panel">16.13 'curses.panel' — A panel stack extension for curses</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">Panels are windows with the added feature of depth, so they can be stacked on top of each other, and only the visible portions of each window will be displayed. Panels can be added, moved up or down in the stack, and removed</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/curses.panel.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>

</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.platform">16.14 'platform' — Access to underlying platform’s identifying data</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">P</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/platform.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="https://marshmallow.readthedocs.io/en/3.0/" target="_blank">Marshmallow 3.0</a>
 - <span class="update">(visited 22 Aug 18)</span>
</li>
</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.errno">16.15 'errno — Standard errno system symbols</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">This module makes available standard errno system symbols. The value of each symbol is the corresponding integer value. The names and descriptions are borrowed from linux/include/errno.h, which should be pretty all-inclusive.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/errno.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader"></div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc16.ctype">16.16 'ctypes' — A foreign function library for Pytho</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">ctypes is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/ctypes.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader"></div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc18">18.0 'contextvars' — Context Variables</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">This module provides APIs to manage, store, and access context-local state. </div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/contextvars.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://gnupg.org/" target="_blank">The GNU Privacy Guard</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader"></div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc18.context">18.1 Context Variables</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">Context Variables should be created at the top module level and never in closures. Context objects hold strong references to context variables which prevents context variables from being properly garbage collected.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/contextvars.html#context-variables" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader"></div>
<div class="propertydescription"></div>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc18.mcm">18.2 Manual Context Management</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription"></div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/contextvars.html#manual-context-management" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on YouTube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">l</a>
| <a href="" target="_blank">l</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader"></div>
<div class="propertydescription"></div>
<p></p>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc18.asyncio">18.3 'asyncio' support</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">Context variables are natively supported in asyncio and are ready to be used without any extra configuration. For example, here is a simple echo server, that uses a context variable to make the address of a remote client available in the Task that handles that client.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/contextvars.html#asyncio-support" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials on Youtube</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
</ol>

<div class="propertyheader">U</div>
<div class="propertydescription">[Windows CMD]</div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->
<hr />
<p></p>
<p></p>

<table summary="">
<tbody>
<tr>
<td>
<p></p><p></p>
<a href="#top"><img height="40" alt="Go to the Top" src="images/UpArrow.jpg" width="30" /></a></td>
<td><p class="head2"><a id="doc11">16.5 'getopt' — C-style parser for command line options</a><br>
<a class="semanticweb">Version: {}  Released: 2018</a>
<a class="newhtml5">no warnings</a></p></td>
</tr>
</tbody>
</table>

<div class="faqdescription">The getopt module is the old-school command line option parser that supports the conventions established by the Unix function getopt(). It parses an argument sequence, such as sys.argv and returns a sequence of (option, argument) pairs and a sequence of non-option arguments.</div>

<div class="elementheader">Reference</div>
<div class="elementdescription">
| <a href="https://docs.python.org/3.7/library/getopt.html" target="_blank">doc3.7.1</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>
<div class="elementheader">Tutorials</div>
<div class="elementdescription">
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
| <a href="" target="_blank">x</a>
|</div>
<p></p>

<ol>
<li>
<a class="listitem" href="https://pymotw.com/2/getopt/v" target="_blank">pymotw: getopt</a>
 - <span class="update">(published Mar 16, 2019)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>
<li>
<a class="listitem" href="" target="_blank">M</a>
 - <span class="update">(visited 20 Jun 18)</span>
</li>

</ol>

<div class="propertyheader">H</div>
<div class="propertydescription"></div>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++  -->

</body>
</html>
